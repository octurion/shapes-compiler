class Main<p1> where
    p1: [Main<p1>]
{
    f: i32;

    fn identity(x: i32): i32
    {
        return x;
    }

    fn getter(): i32
    {
        return f;
    }

    fn setter(x: i32)
    {
        f = x;
    }

    fn foreach_loop(begin: i32, end: i32): i32
    {
        let sum: i32;

        sum = 0;
        foreach i = begin .. end {
            sum += i;
        }
        return sum;
    }
}

class A<q1, q2> where
    q1: [A<q1, q2>],
    q2: [B<q2, q1>]
{
    f: B<q2, q1>;
    fv: i32;

    fn is_null(): bool
    {
        return f == null;
    }

    fn make_twin(value: i32)
    {
        f = new B<q2, q1>;
        f.g = this;
        f.gv = value;
    }

    fn twin_getter(): i32
    {
        if f == null {
            return -1;
        }

        return f.gv;
    }

    fn twin_setter(new_value: i32)
    {
        if f == null {
            return;
        }

        f.gv = new_value;
    }

    fn getter(): i32
    {
        return fv;
    }

    fn setter(new_value: i32)
    {
        fv = new_value;
    }
}

class B<r1, r2> where
    r1: [B<r1, r2>],
    r2: [A<r2, r1>]
{
    g: A<r2, r1>;
    gv: i32;
}
layout LB: B = rec{g} + rec{gv};
